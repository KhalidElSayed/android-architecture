apply plugin: 'com.android.application'

android {
    compileSdkVersion build_versions.target_sdk
//    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.example.android.architecture.blueprints.todomvvmrxjava"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

//        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }

        // You must set up an environment var before release signing
        // Run: export APP_KEY={password} for Mac
        // Run: set APP_KEY={password} for Windows
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'releasekey'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
            v2SigningEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        def BASE_URL = "BASE_URL"

        def configAny = { k -> "\"${project.properties.get(k)}\"" }
        def config = { p, k -> "\"${project.properties.get(p + '.' + k)}\"" }
        def configDebug = { k -> config('dev', k) }
        def configRelease = { k -> config('release', k) }

        debug {
            // Minifying the variant used for tests is not supported when using Jack.
            minifyEnabled false
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'

            versionNameSuffix " Debug"
            debuggable true
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')

            buildConfigField "String", BASE_URL, configDebug("baseUrl")
        }

        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'

            debuggable false

//            signingConfig signingConfigs.release

//            buildConfigField "String", BASE_URL, configRelease("baseUrl")
        }
    }

    sourceSets {
        test.java.srcDirs += "src/test-common/java"
        androidTest.java.srcDirs += "src/test-common/java"
    }

    // Using gradle plugin 3 you need to specify flavor dimensions.
    flavorDimensions 'buildType'

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        dev {
            dimension 'buildType'
        }
        mock {
            dimension 'buildType'
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension 'buildType'
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true)
        } else if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('dev')) {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    // App's dependencies, including test
    // Support libraries
    implementation deps.support.app_compat
    implementation deps.support.v4
    implementation deps.support.design
    implementation deps.support.recyclerview
    implementation deps.support.cardview

    // Architecture components
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    annotationProcessor deps.lifecycle.compiler

    // Room
    implementation deps.room.runtime
    implementation deps.room.rxjava2
    annotationProcessor deps.room.compiler

    // RxJava
    implementation deps.rxjava2
    implementation deps.rxandroid

    // Dagger 2
    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    annotationProcessor deps.dagger.compiler
    annotationProcessor deps.dagger.android_support_compiler

    // Butterknife
    implementation deps.butterknife.runtime
    annotationProcessor deps.butterknife.compiler

    // Retrofit
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.retrofit.rxjava
    implementation deps.retrofit.mock
    implementation deps.okhttp_logging_interceptor

    // Glide
    implementation deps.glide.runtime
    annotationProcessor deps.glide.compiler

    // Dependencies for local unit tests
    testImplementation deps.junit
    testImplementation deps.hamcrest
    testImplementation deps.arch_core.testing
    testImplementation deps.mockito.all

    // Guava
    implementation deps.guava

    // Tray (SharedPreference) Lib
    implementation deps.tray

    // firebase
    implementation deps.firebase.core

    // KProgressHUD Lib
    implementation deps.kprogresshud

    // Alerter - Beautiful Alert Lib
    implementation deps.alerter

    implementation deps.timber

    // espresso idling
    implementation deps.espresso.idling_resource

    // Dependencies for local unit tests
    testImplementation deps.junit
    testImplementation deps.mockito.all
    testImplementation deps.mockito.inline
    testImplementation deps.hamcrest
    testImplementation deps.arch_core.testing

    // Resolve conflicts between main and local unit tests
    testImplementation deps.support.annotations
    testImplementation deps.support.core_utils

    // Android Testing Support Library's runner and rules
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules
    androidTestImplementation deps.room.testing
    androidTestImplementation deps.arch_core.testing

    // Dependencies for Android unit tests
    androidTestImplementation deps.junit
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }
    androidTestImplementation deps.dexmaker
    /*androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'*/

    // Espresso UI Testing
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib
    androidTestImplementation deps.espresso.intents

    // Resolve conflicts between main and test APK:
    androidTestImplementation deps.support.annotations
    androidTestImplementation deps.support.v4
    androidTestImplementation deps.support.recyclerview
    androidTestImplementation deps.support.app_compat
    androidTestImplementation deps.support.design
}

//apply plugin: 'com.google.gms.google-services'